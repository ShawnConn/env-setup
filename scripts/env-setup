#!/usr/bin/env bash

# Set stop on error / enable debug
set -euo pipefail

############################################################################
# ENVSETUP
############################################################################

##{{{#######################################################################
############################################################################
# FUNCTIONS
############################################################################

# Config env-setup
config() {
    ENVSETUP_CONFIG_MSG="Select an env-setup config (enter q to quit):"
    CONFIG=${1:-""}
    CFILE="$INSTALL_DIR/config.yml"
    CONFIG_TYPE=""

    if [[ -f "$CFILE" ]]; then
        if [[ -L "$CFILE" ]]; then
            # shellcheck disable=SC2012
            FILE="$(ls -l "$CFILE" | cut -d'>' -f2 | xargs)"
            FILE="$(basename "$FILE")"
            # shellcheck disable=SC2001
            CONFIG_TYPE=$(echo "$FILE" | sed 's/.\(.*\).config.yml/\1/')
        else
            CONFIG_TYPE="custom"
        fi
    else
        CONFIG_TYPE="default"
    fi

    echo -e "${C_SUC}Config currently set to ${C_WAR}$CONFIG_TYPE${C_RES}"
    echo -e "${C_SUC}$ENVSETUP_CONFIG_MSG${C_RES}\n"
    if [[ -z "$CONFIG" ]]; then
        OPTIONS="none mini default most custom"
        select CONFIG in $OPTIONS; do
            break
        done
    fi

    if [[ -z "$CONFIG" ]]; then
        echo -e "${C_WAR}Quit${C_RES}\n"
        exit 0
    fi
    if [[ "$CONFIG" == "custom" ]]; then
        if [[ -f "$CFILE" ]]; then
            rm "$CFILE"
        fi
        echo -e "${C_SUC}Select starter for custom config:${C_RES}\n"
        OPTIONS="none mini default most"
        select CONFIG in $OPTIONS; do
            cp "$INSTALL_DIR/.$CONFIG.config.yml" "$CFILE"
            break
        done
        echo -e "${C_SUC}Starter custom config set${C_RES}"
    else
        if [[ -f "$CFILE" ]]; then
            rm "$CFILE"
        fi
        if [[ "$CONFIG" != "default" ]]; then
            ln -s "$INSTALL_DIR/.$CONFIG.config.yml" "$CFILE"
        fi
        echo -e "${C_SUC}Config set to ${C_WAR}$CONFIG${C_RES}"
    fi
}

# Update env-setup
update() {
    cd "$INSTALL_DIR"

    if [[ -f config.yml ]]; then
        ANSIBLE_EXTRA_VARS="-e @config.yml"
    else
        ANSIBLE_EXTRA_VARS="-e @default.config.yml"
    fi

    ENVSETUP_DIR=$(pwd)
    # shellcheck disable=SC2086
    PUB_DOTFILES_DIR=$(ansible -m shell                                    \
        -a "echo {{ pub_dotfiles_repo_local_destination }}" -t tmp         \
        localhost $ANSIBLE_EXTRA_VARS 2> /dev/null | cut -d'>' -f3 | xargs \
        || true)
    # shellcheck disable=SC2086
    PRV_DOTFILES_DIR=$(ansible -m shell                                    \
        -a "echo {{ prv_dotfiles_repo_local_destination }}" -t tmp         \
        localhost $ANSIBLE_EXTRA_VARS 2> /dev/null | cut -d'>' -f3 | xargs \
        || true)
    rm "tmp/localhost"

    while read -r DOTFILE_PATH; do
        REPO="$(basename "${DOTFILE_PATH/'~'/$HOME}")"
        echo -e "\n${C_HIL}Updating $REPO...${C_RES}"
        cd "${DOTFILE_PATH/'~'/$HOME}"

        GIT_STASH="env-setup-update-$(date +%s)"
        git stash -m "$GIT_STASH"
        git pull --rebase
        # shellcheck disable=SC1083
        git stash apply stash^{/"$GIT_STASH"} 2> /dev/null || true
        git stash drop 0 2> /dev/null || true
    done < <(echo -e "$ENVSETUP_DIR\n$PUB_DOTFILES_DIR\n$PRV_DOTFILES_DIR")
}

# Run env-setup playbook
run_playbook() {
    PLAYBOOK_NAME=${1:-""}
    PLAYBOOK_DIR=${2:-""}

    if [[ -d "$PLAYBOOK_DIR" ]]; then
        if [[ -z "$ANSIBLE_PLAYBOOK_INFO" ]]; then
            echo -e "\n${C_HIL}Run $PLAYBOOK_NAME playbook...${C_RES}"
        else
            echo -e "\n${C_HIL}Show $PLAYBOOK_NAME playbook tasks...${C_RES}"
        fi
        PWD=$(pwd)
        cd "$PLAYBOOK_DIR"

        if [[ -f requirements.yml ]]; then
            # shellcheck disable=SC2086
            ansible-galaxy install $ANSIBLE_VERBOSE -r requirements.yml
        fi
        if [[ "$ANSIBLE_SUDO" == "-K" ]]; then
            echo -e "\n${C_WAR}Enter password for install permissions${C_RES}"
        else
            ANSIBLE_SUDO=""
        fi
        if [[ -f ../../../config.yml ]]; then
            ANSIBLE_EXTRA_VARS="-e @../../../config.yml"
        else
            ANSIBLE_EXTRA_VARS=""
        fi

        ANSIBLE_TAG_FLAGS=""
        if [[ -n "$ANSIBLE_SKIPPED_TAGS" ]]; then
            ANSIBLE_TAG_FLAGS="--skip-tags $ANSIBLE_SKIPPED_TAGS"
        fi
        if [[ -n "$ANSIBLE_TAGS" ]]; then
            ANSIBLE_TAG_FLAGS="--tags $ANSIBLE_TAGS"
        fi

        # shellcheck disable=SC2086
        ansible-playbook main.yml $ANSIBLE_VERBOSE $ANSIBLE_CHECK \
            $ANSIBLE_TAG_FLAGS                                    \
            -i inventory $ANSIBLE_SUDO                            \
            $ANSIBLE_EXTRA_VARS                                   \
            $ANSIBLE_PLAYBOOK_INFO
        cd "$PWD"
        echo -e "\n${C_SUC}$PLAYBOOK_NAME playbook completed!${C_RES}"
    else
        echo -e "\n${C_ERR}Could not find the $PLAYBOOK_NAME playbook!${C_RES}"
        exit 1
    fi
}

##}}}#######################################################################


#/ Usage: $SCRIPT [PLAYBOOK]
#/
#/
#/   <PLAYBOOK>: An optional playbook name for env-setup to run.
#/
#/ Examples:
#/
#/   $SCRIPT
#/      Start $SCRIPT to select playbooks to setup.
#/   $SCRIPT -A
#/      Generate aliases to be sourced with "eval "$(env-setup -A)
#/   $SCRIPT -c
#/      Set a new config.
#/   $SCRIPT -C 02-cli
#/      Run "02-cli" playbook as a "dry-run". (--check)
#/   $SCRIPT -i 04-packages
#/      Show "04-packages" playbook tasks.
#/   $SCRIPT -e
#/      Open the custom config.yml for editing via $EDITOR
#/   $SCRIPT -s prv_dotfiles 01-config
#/      Run "01-config" playbook with skipping the prv_dotfiles tasks
#/   $SCRIPT -t pub_dotfiles 01-config
#/      Run "01-config" playbook with only the pub_dotfiles tasks
#/   $SCRIPT -v 03-apps
#/      Run "03-apps" playbook in verbose mode.
#/   $SCRIPT 04-my-playbook
#/      Have $SCRIPT run the "04-my-playbook" playbook.
#/
#/ Options:
#/   --help/-h: Display this help message
#/          -A: Generate aliases for env-setup tools
#/          -c: Set a new config
#/          -C: Check the changes of the playbook.
#/          -i: Get task info about a playbook.
#/          -e: Open custom config.yml w/ $EDITOR
#/          -s: Run playbook with SKIPPED tags
#/          -t: Run playbook with tags
#/          -u: Update env-setup from its remote Git source
#/          -v: Run env-setup with verbose mode
SCRIPT=$(basename "$0")
SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=/dev/null
source "$SCRIPTS_DIR/_common"
usage() {
    grep '^#/' "$0" | cut -c4- | sed -e "s/\$SCRIPT/$SCRIPT/g" ; exit 0 ;
}
expr "$*" : ".*--help" > /dev/null && usage

# Handle options
# Add options x: - required arg
while getopts 'AcCheistuv' FLAG; do
    # shellcheck disable=SC2317
    case "${FLAG}" in

        A)
            echo "alias env-vm-create=\"$INSTALL_DIR/vm/scripts/create-tart-vms\""
            echo "alias env-vm-env-setup=\"$INSTALL_DIR/vm/scripts/env-setup\""
            echo "alias env-vm-init=\"$INSTALL_DIR/vm/scripts/init\""
            echo "alias env-vm-scp=\"$INSTALL_DIR/vm/scripts/scp\""
            echo "alias env-vm-ssh=\"$INSTALL_DIR/vm/scripts/ssh\""
            echo "alias env-vm-start=\"$INSTALL_DIR/vm/scripts/start\""
            echo "alias env-vm-stop=\"$INSTALL_DIR/vm/script/stop\""
            exit 0
            shift "$((OPTIND-1))"
            ;;

        c) shift "$((OPTIND-1))"; config "${1:-""}"; exit 0 ;;

        C)
            ANSIBLE_CHECK="-C"
            shift "$((OPTIND-1))"
            ;;

        h) usage; exit 0 ;;

        e)
            $EDITOR "$ENVSETUP_DIR/config.yml"
            echo -e "${C_SUC}Updated ${C_WAR}$ENVSETUP_DIR/config.yml${C_RES}"
            exit 0
            ;;

        i)
            ANSIBLE_PLAYBOOK_INFO="--list-tasks"
            shift "$((OPTIND-1))"
            ;;

        s)
            shift "$((OPTIND-1))"
            ANSIBLE_SKIPPED_TAGS="$1"
            shift "$((OPTIND-1))"
            ;;

        t)
            shift "$((OPTIND-1))"
            ANSIBLE_TAGS="$1"
            shift "$((OPTIND-1))"
            ;;

        u) update; exit 0 ;;

        v)
            set -vx
            ANSIBLE_VERBOSE="-vvv"
            ANSIBLE_STDOUT_CALLBACK="debug"
            shift "$((OPTIND-1))"
            ;;
        *) : ;;
    esac
done

############################################################################
# VARS
############################################################################
ANSIBLE_SUDO=${ANSIBLE_SUDO:-"-K"}
ANSIBLE_CHECK=${ANSIBLE_CHECK:-""}
ANSIBLE_PLAYBOOK_INFO=${ANSIBLE_PLAYBOOK_INFO:-""}
ANSIBLE_SKIPPED_TAGS=${ANSIBLE_SKIPPED_TAGS:-""}
ANSIBLE_TAGS=${ANSIBLE_TAGS:-""}
ANSIBLE_VERBOSE=${ANSIBLE_VERBOSE:-""}
# unixy | dense | debug | yaml | selective
export ANSIBLE_STDOUT_CALLBACK=${ANSIBLE_STDOUT_CALLBACK:-"unixy"}
export ANSIBLE_ROLES_PATH="$HOME/.ansible/roles"
ENVSETUP_SELECT_MSG="Select an env-setup playbook (enter q to quit):"
INIT_PLAYBOOK=".00-init"
PY_VER=$(python3 -m site --user-site | cut -d'/' -f6)
export PATH="$HOME/Library/Python/$PY_VER/bin:/usr/local/bin:$PATH"
PLAYBOOK=${1:-""}

############################################################################
# MAIN
############################################################################

SUGGEST_ANSIBLE=$(if [[ -x "$(command -v ansible)" ]]; then \
    echo "0"; else echo "${ENVSETUP_SUGGEST_ANSIBLE:-1}"; fi)
if [[ $SUGGEST_ANSIBLE == "1" ]]; then
    echo -e "To begin we'll need to...\n"
    if [[ $ENVSETUP_OS =~ "darwin"* ]]; then
        SUGGEST_PIP=$(if [[ "$(python3 -m pip -V 2> /dev/null)" ]]; then \
            echo "0"; else echo "${ENVSETUP_SUGGEST_PIP:-1}"; fi)
        if [[ $SUGGEST_PIP == "1" ]]; then
            echo -e "[ ] install Pip"
        fi
    fi
    echo -e "[ ] install Ansible"
    if [[ $ENVSETUP_INTERACT == "1" ]]; then
        read -r -p "Continue? (yes/no): " ANSWER
        [[ $ANSWER == "yes" ]] || exit 0
        echo -e "\n"
    fi
fi

case "$ENVSETUP_OS" in
    "darwin"* )
        if [[ $SUGGEST_ANSIBLE == "1" ]]; then
            "$SCRIPTS_DIR/macos/install-ansible"
        fi
        ABSOLUTE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" \
            && pwd)/$(basename "${BASH_SOURCE[0]}")"
        PLAYBOOKS="$(dirname "$(dirname "$ABSOLUTE_PATH")")/ansible/macos"
        ;;
    "linux"* )
        if [[ $SUGGEST_ANSIBLE == "1" ]]; then
            "$SCRIPTS_DIR/linux/install-ansible"
        fi
        PLAYBOOKS="$(dirname "$(realpath "$SCRIPTS_DIR")")/ansible/linux"
        ;;
    * )
        echo -e "${C_WAR}Unsupported OS${C_RES}\n"
        exit 1
        ;;
esac

if [[ ! -f "$PLAYBOOKS/$INIT_PLAYBOOK/.init" ]]; then
    run_playbook "Initial" "$PLAYBOOKS/$INIT_PLAYBOOK"
fi

if [[ -z "$PLAYBOOK" ]]; then
    echo -e "${C_SUC}$ENVSETUP_SELECT_MSG${C_RES}\n"
    # shellcheck disable=SC2116,SC2046
    # ls -d /home/ubuntu/env-setup/ansible/linux/* | xargs -n1 basename
    OPTIONS=$(find "$PLAYBOOKS/"* -type d -print0 | xargs -0 -n1 basename)
    select PLAYBOOK in $OPTIONS; do
        if [[ "$PLAYBOOK" == "" ]]; then
            echo -e "${C_WAR}Quit${C_RES}\n"
            exit 0
        else
            run_playbook "$PLAYBOOK" "$PLAYBOOKS/$PLAYBOOK"
            echo -e "\n${C_SUC}$PLAYBOOK completed!${C_RES}"
            exit 0
        fi
    done
    echo -e "${C_SUC}$ENVSETUP_SELECT_MSG${C_RES}\n"
else
    if [[ "$PLAYBOOK" == "all" ]]; then
        echo -e "${C_SUC}Running all playbooks:${C_RES}\n"
        OPTIONS=$(find "$PLAYBOOKS/"* -type d -print0 | xargs -0 -n1 basename)
        for PLAYBOOK in $OPTIONS; do
            run_playbook "$PLAYBOOK" "$PLAYBOOKS/$PLAYBOOK"
        done
    else
        run_playbook "$PLAYBOOK" "$PLAYBOOKS/$PLAYBOOK"
    fi
fi
